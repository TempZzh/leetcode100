{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Cpp File Header": {
		"prefix": "code",
		"body": [
			"#include <iostream>",
			"#include <vector>",
			"#include <unordered_map>",
			"#include <stack>",
			"using namespace std;",
			"",
			"// Definition for a binary tree node.",
			"struct TreeNode {",
			"\tint val;",
			"\tTreeNode *left;",
			"\tTreeNode *right;",
			"\tTreeNode() : val(0), left(nullptr), right(nullptr) {}",
			"\tTreeNode(int x) : val(x), left(nullptr), right(nullptr) {}",
			"\tTreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}",
			"};",
			"",
			"// Definition for singly-linked list.",
			"struct ListNode {",
			"\tint val;",
			"\tListNode *next;",
			"\tListNode() : val(0), next(nullptr) {}",
			"\tListNode(int x) : val(x), next(nullptr) {}",
			"\tListNode(int x, ListNode *next) : val(x), next(next) {}",
			"};",
			"",
			"class Solution {",
			"public:",
			"\tvoid func(int para1) {",
			"\t\treturn ;",
			"\t}",
			"};",
			"",
			"int main() {",
			"\tstd::cout << \"result:\" << std::endl;",
			"\treturn 0;",
			"}",
			""
		],
		"description": "C++ File Header"
	}
}